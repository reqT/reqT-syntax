/* The following code was generated by JFlex 1.5.1 */

/*
 * 21/05/2014
 *
 * ReqTTokenMaker.java - Scanner for the reqT + Scala.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Scala programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated ReqTTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ReqTTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING_DOUBLE = 2;
  public static final int MLC = 4;
  public static final int EOL_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\24\1\25\1\26\1\25\22\0\1\33\1\35\1\27"+
    "\1\35\1\1\1\35\1\35\1\22\2\4\1\32\1\16\1\35\1\16"+
    "\1\21\1\31\1\12\11\3\1\44\1\35\1\0\1\35\1\0\2\35"+
    "\1\66\1\75\1\10\1\17\1\14\1\71\1\72\1\1\1\65\2\1"+
    "\1\6\1\64\1\1\1\100\1\67\1\73\1\70\1\54\1\74\1\76"+
    "\1\1\1\77\3\1\1\4\1\23\1\4\1\0\1\5\1\30\1\46"+
    "\1\47\1\11\1\20\1\15\1\42\1\63\1\36\1\43\1\60\1\62"+
    "\1\7\1\55\1\52\1\51\1\40\1\2\1\50\1\41\1\37\1\57"+
    "\1\61\1\45\1\13\1\53\1\56\1\34\1\0\1\34\1\35\6\0"+
    "\1\25\u1fa2\0\1\25\1\25\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\4\2\1\3"+
    "\5\2\1\5\1\6\1\7\1\10\36\2\1\1\1\11"+
    "\1\12\2\1\1\13\5\1\1\14\3\1\1\2\1\3"+
    "\1\0\2\15\5\2\1\0\6\2\1\16\1\17\1\5"+
    "\1\10\1\20\1\10\1\21\1\22\13\2\1\23\47\2"+
    "\1\11\1\0\1\24\10\0\1\2\1\15\1\0\7\2"+
    "\1\25\2\2\1\26\2\2\1\27\11\2\1\16\44\2"+
    "\1\30\1\2\1\31\10\0\45\2\2\0\1\32\2\0"+
    "\1\33\7\2\2\16\23\2\4\0\36\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u0104"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0104\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0104\0\u0d34"+
    "\0\u0d75\0\u0104\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0104"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0104\0\u0fff\0\u0104\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248"+
    "\0\u1289\0\u12ca\0\u130b\0\u134c\0\u0145\0\u0104\0\u138d\0\u13ce"+
    "\0\u0104\0\u140f\0\u0104\0\u0104\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u0145"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u0104"+
    "\0\u2102\0\u0104\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288"+
    "\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\u11c6\0\u25d5\0\u2616\0\u0145"+
    "\0\u2657\0\u2698\0\u0104\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u0145\0\u3287\0\u0104\0\u32c8\0\u3309\0\u334a\0\u338b"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u4696\0\u46d7\0\u3eb7\0\u4718\0\u3f7a\0\u4759"+
    "\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961"+
    "\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69"+
    "\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\6\1\16\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\5\1\25\1\10\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\5\1\37\1\40\1\6\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\3\6\1\47\2\6"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\23\65\1\66\1\67"+
    "\2\65\1\70\51\65\24\71\1\72\5\71\1\73\3\71"+
    "\1\74\3\71\1\75\2\71\1\76\33\71\24\77\1\100"+
    "\11\77\1\101\3\77\1\102\2\77\1\103\33\77\102\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\34\6\3\0\1\7\2\0\2\105\2\0\1\7"+
    "\1\0\2\106\1\0\2\107\1\110\20\0\1\107\26\0"+
    "\1\107\10\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\111\32\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\112\32\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\113\27\6"+
    "\1\0\3\6\1\0\1\104\1\6\1\114\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\115\32\6\3\0"+
    "\1\7\2\0\2\105\2\0\1\7\1\116\2\106\1\0"+
    "\2\107\1\110\20\0\1\107\26\0\1\107\10\0\3\6"+
    "\1\0\1\104\5\6\1\117\2\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\120\26\6\1\0\3\6\1\0"+
    "\1\104\1\6\1\121\3\6\1\122\2\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\7\6\1\123\1\0\2\6\15\0\6\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\7\6\1\124\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\125\27\6\3\0\1\110"+
    "\6\0\1\110\66\0\22\23\1\126\1\127\55\23\26\0"+
    "\1\25\4\0\1\25\45\0\23\26\1\130\3\26\1\131"+
    "\51\26\30\132\1\0\50\132\31\0\1\133\1\134\47\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\135\32\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\1\136\5\6\1\0\3\6"+
    "\1\137\2\6\1\140\25\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\141"+
    "\1\6\1\142\30\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\143\1\0\2\6\15\0\6\6\1\0\12\6\1\144"+
    "\21\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\5\6\1\145\1\0\1\6\1\146\2\6\1\147"+
    "\27\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\3\6\1\150\1\125\1\6\1\0\10\6\1\151"+
    "\23\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\1\152\4\6\1\153\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\2\6\1\154\31\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\155\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\2\6\1\156\11\6\1\157\17\6\1\0\3\6"+
    "\1\0\1\104\7\6\1\160\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\161\21\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\5\6\1\162\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\3\6\1\163\3\6\1\164"+
    "\1\0\2\6\15\0\1\6\1\165\1\166\3\6\1\0"+
    "\6\6\1\167\3\6\1\170\21\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\171\32\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\172\32\6\1\0"+
    "\3\6\1\0\1\104\7\6\1\173\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\1\6\1\174\15\0\1\6\1\175\4\6\1\0"+
    "\5\6\1\176\26\6\1\0\3\6\1\0\1\104\3\6"+
    "\1\177\4\6\1\0\2\6\15\0\1\6\1\200\4\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\201\30\6\1\0"+
    "\3\6\1\0\1\104\7\6\1\202\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\203\1\0\2\6\15\0\6\6\1\0\12\6\1\204"+
    "\21\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\5\6\1\205\1\0\4\6\1\206\27\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\207\21\6\1\0\3\6\1\0\1\104"+
    "\7\6\1\210\1\0\2\6\15\0\5\6\1\211\1\0"+
    "\1\6\1\212\32\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\213\32\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\3\6\1\214\2\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\1\215\5\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\2\6\1\216\3\6\1\0\12\6\1\217\21\6"+
    "\23\65\2\0\2\65\1\0\51\65\24\220\3\0\52\220"+
    "\27\0\1\221\51\0\24\71\1\0\5\71\1\0\3\71"+
    "\1\0\3\71\1\0\2\71\1\0\33\71\31\0\1\222"+
    "\106\0\1\223\100\0\1\224\3\0\1\225\102\0\1\226"+
    "\33\0\24\77\1\0\11\77\1\0\3\77\1\0\2\77"+
    "\1\0\33\77\37\0\1\227\100\0\1\230\3\0\1\231"+
    "\102\0\1\232\33\0\1\233\3\6\1\0\1\104\10\6"+
    "\1\233\2\6\1\0\4\233\1\0\4\233\1\0\2\233"+
    "\6\6\1\233\34\6\3\0\1\234\6\0\1\234\3\0"+
    "\1\235\65\0\1\110\6\0\1\110\1\0\2\106\1\0"+
    "\2\107\21\0\1\107\26\0\1\107\10\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\2\6"+
    "\1\236\31\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\11\6\1\237\22\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\1\6\1\240\15\0"+
    "\3\6\1\216\2\6\1\0\5\6\1\241\26\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\242\32\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\1\6\1\243\1\6\1\244"+
    "\2\6\1\0\34\6\3\0\1\245\4\0\3\245\1\0"+
    "\2\245\1\0\2\245\21\0\1\245\3\0\2\245\16\0"+
    "\1\245\2\0\1\245\3\0\1\245\4\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\2\6\1\246\3\6"+
    "\1\0\1\6\1\247\32\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\1\6\1\250\4\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\3\6\1\244\2\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\1\6\1\251"+
    "\4\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\3\6\1\252\2\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\4\6\1\125\1\6\1\0\34\6\24\23\3\0\52\23"+
    "\24\26\3\0\52\26\30\132\1\253\50\132\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\3\6\1\150"+
    "\2\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\5\6\1\254\1\0\3\6\1\255"+
    "\30\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\256\4\6\1\125\3\6"+
    "\1\244\21\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\2\6\1\244\3\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\3\6\1\257\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\5\6\1\260\1\0\4\6"+
    "\1\261\27\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\262\32\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\2\6"+
    "\1\263\3\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\5\6\1\264"+
    "\26\6\1\0\3\6\1\0\1\104\1\6\1\121\6\6"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\265\30\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\2\6\1\266\3\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\5\6\1\267\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\1\6\1\270\4\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\3\6\1\271\2\6\1\0\34\6\1\0\1\6"+
    "\1\272\1\6\1\0\1\104\1\6\1\273\6\6\1\0"+
    "\2\6\15\0\1\6\1\274\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\13\6\1\275\20\6\1\0\3\6\1\0\1\104"+
    "\7\6\1\276\1\0\2\6\15\0\6\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\125\33\6\1\0\3\6\1\0\1\104"+
    "\1\6\1\277\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\7\6\1\300\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\7\6\1\301\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\3\6\1\302\4\6"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\303\32\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\304\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\3\6"+
    "\1\305\2\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\2\6\1\306"+
    "\31\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\1\6\1\243\4\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\1\6\1\125\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\125\30\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\1\6\1\307\4\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\7\6\1\307"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\7\6\1\310\1\0\2\6\15\0\6\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\311\1\312\3\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\1\6\1\313\4\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\1\6\1\314\4\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\5\6\1\315\1\0\4\6\1\316\27\6"+
    "\1\0\1\6\1\250\1\6\1\0\1\104\1\6\1\317"+
    "\6\6\1\0\2\6\15\0\3\6\1\320\2\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\321\32\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\5\6\1\164\26\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\3\6\1\216\2\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\322\32\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\323\32\6\1\0\3\6\1\0\1\104\5\6\1\216"+
    "\2\6\1\0\2\6\15\0\3\6\1\324\2\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\1\6\1\325\4\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\3\6\1\326"+
    "\2\6\1\0\3\6\1\327\30\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\330\30\6\1\0\3\6\1\0\1\104\7\6\1\331"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\6\6\1\332\25\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\1\6\1\332\4\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\1\6\1\333\4\6\1\0\34\6\27\0\1\334\110\0"+
    "\1\335\101\0\1\336\47\0\1\337\136\0\1\340\72\0"+
    "\1\341\101\0\1\342\47\0\1\343\136\0\1\344\33\0"+
    "\1\233\15\0\1\233\3\0\4\233\1\0\4\233\1\0"+
    "\2\233\6\0\1\233\37\0\1\234\6\0\1\234\4\0"+
    "\2\107\21\0\1\107\26\0\1\107\12\0\1\234\6\0"+
    "\1\234\67\0\3\6\1\0\1\104\7\6\1\322\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\6\6"+
    "\1\125\25\6\1\0\3\6\1\0\1\104\7\6\1\332"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\3\6\1\345"+
    "\2\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\3\6\1\254\2\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\3\6\1\270\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\7\6\1\125\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\7\6\1\346\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\10\6"+
    "\1\347\23\6\1\0\3\6\1\0\1\104\7\6\1\350"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\5\6\1\351"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\3\6\1\125\2\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\160\27\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\5\6\1\352\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\15\6\1\353\16\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\14\6"+
    "\1\354\17\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\355\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\1\6\1\356\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\7\6\1\357\1\0\2\6\15\0\6\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\360\32\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\7\6"+
    "\1\361\24\6\1\0\3\6\1\0\1\104\1\6\1\362"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\4\6\1\363"+
    "\27\6\1\0\3\6\1\0\1\104\1\6\1\244\6\6"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\1\125\5\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\364\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\365\21\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\366"+
    "\32\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\12\6\1\367\21\6\1\0\3\6"+
    "\1\0\1\104\7\6\1\370\1\0\2\6\15\0\6\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\371\30\6\1\0"+
    "\3\6\1\0\1\104\1\6\1\125\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\1\6\1\372\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\5\6\1\373\26\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\1\6\1\374"+
    "\4\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\15\6\1\375\16\6"+
    "\1\0\3\6\1\0\1\104\3\6\1\332\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\1\6\1\175\4\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\1\6\1\376\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\250\32\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\10\6\1\250\23\6"+
    "\1\0\3\6\1\0\1\104\7\6\1\377\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\12\6\1\216"+
    "\21\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u0100\27\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\332\30\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\332\27\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\1\6\1\u0101"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\7\6\1\u0102\1\0\2\6\15\0\6\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\4\6\1\u0103\27\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\1\6\1\u0104\4\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\1\6\1\250"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\1\6\1\u0105\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\1\6\1\u0106\4\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\1\6\1\240\6\6"+
    "\1\0\2\6\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\15\6\1\250\16\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\16\6\1\u0107\15\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u0108\30\6\1\0\3\6\1\0"+
    "\1\104\2\6\1\u0102\5\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u0109\30\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\2\6\1\312\3\6\1\0"+
    "\34\6\40\0\1\u010a\104\0\1\u010b\51\0\1\336\104\0"+
    "\1\u010c\117\0\1\u010d\104\0\1\u010e\51\0\1\342\104\0"+
    "\1\u010f\60\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\1\6\1\u0110\4\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\3\6\1\u0111\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\2\6\1\325\3\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\u0112\26\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\16\6"+
    "\1\u0113\15\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\125\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\u0114\32\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0115"+
    "\32\6\1\0\3\6\1\0\1\104\7\6\1\u0116\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\7\6\1\372\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0117\30\6\1\0\3\6"+
    "\1\0\1\104\1\6\1\u0118\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\u0119\27\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\5\6\1\u011a\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\352"+
    "\30\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u011b\30\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\5\6\1\u011c"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\u011d\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u011e\30\6\1\0\3\6\1\0\1\104"+
    "\3\6\1\352\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u011f\30\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\1\6\1\125\15\0\6\6"+
    "\1\0\34\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\u0120\32\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\5\6"+
    "\1\u0121\1\0\34\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\u0122\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\u0123\27\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0124"+
    "\30\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\250\30\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\12\6\1\u0125\21\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u0126\32\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u0127\21\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\12\6"+
    "\1\u0128\21\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\5\6\1\u0129\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\2\6\1\u0102\5\6\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\7\6"+
    "\1\120\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\5\6"+
    "\1\u012a\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\7\6\1\u012b\24\6"+
    "\41\0\1\336\2\0\1\u010b\65\0\1\u012c\50\0\3\u010c"+
    "\1\u012d\11\u010c\1\u012d\2\u010c\2\u012d\6\0\1\u010c\1\u012d"+
    "\2\0\1\u012d\6\u010c\1\u012d\34\u010c\41\0\1\342\2\0"+
    "\1\u010e\65\0\1\u012e\50\0\3\u010f\1\u012f\11\u010f\1\u012f"+
    "\2\u010f\2\u012f\6\0\1\u010f\1\u012f\2\0\1\u012f\6\u010f"+
    "\1\u012f\34\u010f\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\u0130\30\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\1\6"+
    "\1\u0131\4\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\1\6\1\254\15\0\6\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\250\26\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\16\6"+
    "\1\244\15\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\244\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\3\6\1\u0132\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\33\6\1\u0133"+
    "\1\0\3\6\1\0\1\104\1\6\1\237\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\10\6"+
    "\1\244\23\6\1\0\3\6\1\0\1\104\3\6\1\256"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\370\32\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0134"+
    "\30\6\1\0\3\6\1\0\1\104\7\6\1\u0135\1\0"+
    "\2\6\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\125\26\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\5\6\1\u0136\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u0137\30\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\u0113\27\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\1\u0138\5\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\10\6\1\u0139"+
    "\23\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\4\6\1\u013a\1\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\3\6\1\120\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\3\6\1\u013b\2\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u013c\30\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\u013b\30\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\2\6\15\0\1\6\1\u013d\4\6\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\7\6\1\u0100\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\1\6\1\u013e\4\6\1\0\34\6"+
    "\31\0\1\u010c\100\0\1\u010f\50\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u013f"+
    "\32\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u0140\32\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\1\6\1\356"+
    "\4\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\4\6\1\150\1\6\1\0\34\6"+
    "\1\0\3\6\1\0\1\104\7\6\1\135\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\3\6\1\u0141\2\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\1\6"+
    "\1\244\15\0\6\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\5\6\1\u0142\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u0143\27\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u0144\32\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u013c\32\6"+
    "\1\0\3\6\1\0\1\104\7\6\1\250\1\0\2\6"+
    "\15\0\6\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\3\6\1\u013b\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\34\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\6\6\1\250\25\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\4\6\1\u0145\27\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0146\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\1\6"+
    "\1\u0147\4\6\1\0\34\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\27\6\1\u0148"+
    "\4\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\250\27\6\1\0\3\6"+
    "\1\0\1\104\1\6\1\u0149\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0113\1\0\34\6\1\0"+
    "\3\6\1\0\1\104\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u013d\30\6\1\0\3\6\1\0\1\104"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\5\6\1\u014a"+
    "\26\6\1\0\3\6\1\0\1\104\10\6\1\0\2\6"+
    "\15\0\5\6\1\u014b\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\150\27\6\1\0\3\6\1\0\1\104\10\6\1\0"+
    "\1\6\1\u012a\15\0\6\6\1\0\34\6\1\0\3\6"+
    "\1\0\1\104\10\6\1\0\2\6\15\0\1\6\1\u014c"+
    "\4\6\1\0\34\6\1\0\3\6\1\0\1\104\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\u014d\27\6"+
    "\1\0\3\6\1\0\1\104\10\6\1\0\2\6\15\0"+
    "\3\6\1\332\2\6\1\0\34\6\1\0\3\6\1\0"+
    "\1\104\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\332\26\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20215];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\2\1\1\11\13\1\1\11"+
    "\42\1\1\11\2\1\1\11\5\1\1\11\4\1\1\11"+
    "\1\0\1\11\6\1\1\0\7\1\1\11\2\1\1\11"+
    "\1\1\2\11\63\1\1\11\1\0\1\11\10\0\2\1"+
    "\1\0\15\1\1\11\60\1\1\11\10\0\45\1\2\0"+
    "\1\1\2\0\35\1\4\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ReqTTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = MULTILINE_STRING_DOUBLE;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				break;
			default:
				state = YYINITIAL;
		}

		s = text;
		start = text.offset;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReqTTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ReqTTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 28: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.SEPARATOR);
          }
        case 31: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 33: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 9: 
          { /* Skip escaped chars, handles case: '\"""'. */
          }
        case 36: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 37: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 39: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 42: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 43: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 45: break;
        case 19: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 48: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 23: 
          { addToken(Token.LITERAL_BACKQUOTE);
          }
        case 50: break;
        case 24: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 51: break;
        case 25: 
          { /* addToken(start,zzStartRead+2, Token.LITERAL_STRING_DOUBLE_QUOTE); yybegin(YYINITIAL); */
          }
        case 52: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 334: break;
            case MULTILINE_STRING_DOUBLE: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 335: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 336: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 337: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
