/* The following code was generated by JFlex 1.5.1 */

/*
 * 21/05/2014
 *
 * ReqTTokenMaker.java - Scanner for the reqT + Scala.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Scala programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated ReqTTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ReqTTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING_DOUBLE = 2;
  public static final int MLC = 4;
  public static final int EOL_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\24\1\25\1\26\1\25\22\0\1\33\1\35\1\27"+
    "\1\35\1\1\1\35\1\35\1\22\2\4\1\32\1\16\1\35\1\16"+
    "\1\21\1\31\1\12\11\3\1\44\1\35\1\0\1\35\1\0\2\35"+
    "\1\67\1\10\1\70\1\71\1\14\1\17\1\76\1\1\1\65\2\1"+
    "\1\6\1\64\1\102\1\75\1\72\1\100\1\73\1\54\1\66\1\74"+
    "\1\101\1\77\3\1\1\4\1\23\1\4\1\0\1\5\1\30\1\46"+
    "\1\47\1\11\1\20\1\15\1\42\1\63\1\36\1\43\1\60\1\62"+
    "\1\7\1\55\1\52\1\51\1\40\1\2\1\50\1\41\1\37\1\57"+
    "\1\61\1\45\1\13\1\53\1\56\1\34\1\0\1\34\1\35\6\0"+
    "\1\25\u1fa2\0\1\25\1\25\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\4\2\1\3"+
    "\5\2\1\5\1\6\1\7\1\10\40\2\1\1\1\11"+
    "\1\12\2\1\1\13\5\1\1\14\3\1\1\2\1\3"+
    "\1\0\2\15\7\2\1\0\12\2\1\16\1\17\1\5"+
    "\1\10\1\20\1\10\1\21\1\22\15\2\1\23\65\2"+
    "\1\11\1\0\1\24\10\0\1\2\1\15\1\0\10\2"+
    "\1\25\3\2\1\26\7\2\1\27\14\2\1\16\30\2"+
    "\1\30\42\2\1\31\10\0\77\2\2\0\1\32\2\0"+
    "\1\33\13\2\2\16\36\2\4\0\73\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u010c"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u010c\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u010c\0\u0e22\0\u0e65\0\u010c\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u010c\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u010c\0\u1103"+
    "\0\u010c\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u014f\0\u010c\0\u163f\0\u1682"+
    "\0\u010c\0\u16c5\0\u010c\0\u010c\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u014f\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u010c"+
    "\0\u284e\0\u010c\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8"+
    "\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u135e\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u014f\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u010c\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u014f"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u010c\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9"+
    "\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1"+
    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9"+
    "\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11"+
    "\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29"+
    "\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41"+
    "\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059"+
    "\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271"+
    "\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489"+
    "\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1"+
    "\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9"+
    "\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1"+
    "\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9"+
    "\0\u5d2c\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01"+
    "\0\u5f44\0\u5f87\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119"+
    "\0\u615c\0\u619f\0\u61e2\0\u6225\0\u55d8\0\u6268\0\u56a1\0\u62ab"+
    "\0\u62ee\0\u6331\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u64c3"+
    "\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612\0\u6655\0\u6698\0\u66db"+
    "\0\u671e\0\u6761\0\u67a4\0\u67e7\0\u682a\0\u686d\0\u68b0\0\u68f3"+
    "\0\u6936\0\u6979\0\u69bc\0\u69ff\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b"+
    "\0\u6b4e\0\u6b91\0\u6bd4\0\u6c17\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23"+
    "\0\u6d66\0\u6da9\0\u6dec\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b"+
    "\0\u6f7e\0\u6fc1\0\u7004\0\u7047\0\u708a\0\u70cd\0\u7110\0\u7153"+
    "\0\u7196\0\u71d9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\6\1\16\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\5\1\25\1\10\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\3\6\1\50\2\6"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\6\23\67"+
    "\1\70\1\71\2\67\1\72\53\67\24\73\1\74\5\73"+
    "\1\75\3\73\1\76\3\73\1\77\2\73\1\100\35\73"+
    "\24\101\1\102\11\101\1\103\3\101\1\104\2\101\1\105"+
    "\35\101\104\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\3\0\1\7\2\0\2\107"+
    "\2\0\1\7\1\0\2\110\1\0\2\111\1\112\20\0"+
    "\1\111\26\0\1\111\12\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\113\34\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\114\34\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\115\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\116\1\6\1\117\32\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\120\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\121\34\6\3\0\1\7\2\0\2\107"+
    "\2\0\1\7\1\122\2\110\1\0\2\111\1\112\20\0"+
    "\1\111\26\0\1\111\12\0\3\6\1\0\1\106\5\6"+
    "\1\123\2\6\1\0\2\6\15\0\2\6\1\124\3\6"+
    "\1\0\5\6\1\125\30\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\126\3\6\1\127\2\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\130\1\0\2\6\15\0\5\6\1\131\1\0\3\6"+
    "\1\132\6\6\1\133\23\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\134\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\135\31\6\3\0\1\112\6\0\1\112\70\0\22\23"+
    "\1\136\1\137\57\23\26\0\1\25\4\0\1\25\47\0"+
    "\23\26\1\140\3\26\1\141\53\26\30\142\1\0\52\142"+
    "\31\0\1\143\1\144\51\0\3\6\1\0\1\106\7\6"+
    "\1\145\1\0\2\6\15\0\6\6\1\0\1\6\1\146"+
    "\10\6\1\147\23\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\150\5\6\1\0\3\6\1\151"+
    "\2\6\1\152\27\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\153\1\6"+
    "\1\154\32\6\1\0\3\6\1\0\1\106\7\6\1\155"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\156\23\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\157\1\0\1\6\1\160\2\6\1\161\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\3\6\1\162\1\135\1\6\1\0\5\6\1\163\2\6"+
    "\1\164\25\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\165\4\6\1\166\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\2\6\1\167\33\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\170\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\171\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\2\6\1\172"+
    "\11\6\1\173\21\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\174\1\0\2\6\15\0\6\6\1\0\12\6\1\175"+
    "\23\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\176\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\177\3\6\1\200\1\0\2\6\15\0"+
    "\1\6\1\201\1\202\3\6\1\0\6\6\1\203\27\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\204\34\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\205\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\206\34\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\207\1\0\2\6\15\0\5\6\1\210\1\0\1\6"+
    "\1\211\2\6\1\212\31\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\1\6\1\213\15\0\1\6\1\214\1\6"+
    "\1\215\2\6\1\0\5\6\1\216\2\6\1\217\25\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\220\1\0\2\6"+
    "\15\0\5\6\1\221\1\0\1\6\1\222\34\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\223\4\6\1\0\2\6"+
    "\15\0\1\6\1\224\1\225\3\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\1\6\1\226\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\227\2\6\1\230\31\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\231\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\232\2\6\1\233\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\234\32\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\235\1\0\2\6\15\0\5\6\1\236"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\237\2\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\240\6\6\1\241\23\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\5\6\1\242"+
    "\1\0\4\6\1\243\31\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\244\5\6\1\0\4\6"+
    "\1\245\31\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\12\6\1\246\23\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\247\34\6\23\67\2\0\2\67\1\0"+
    "\53\67\24\250\3\0\54\250\27\0\1\251\53\0\24\73"+
    "\1\0\5\73\1\0\3\73\1\0\3\73\1\0\2\73"+
    "\1\0\35\73\31\0\1\252\110\0\1\253\102\0\1\254"+
    "\3\0\1\255\104\0\1\256\35\0\24\101\1\0\11\101"+
    "\1\0\3\101\1\0\2\101\1\0\35\101\37\0\1\257"+
    "\102\0\1\260\3\0\1\261\104\0\1\262\35\0\1\263"+
    "\3\6\1\0\1\106\10\6\1\263\2\6\1\0\4\263"+
    "\1\0\4\263\1\0\2\263\6\6\1\263\36\6\3\0"+
    "\1\264\6\0\1\264\3\0\1\265\67\0\1\112\6\0"+
    "\1\112\1\0\2\110\1\0\2\111\21\0\1\111\26\0"+
    "\1\111\12\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\2\6\1\266\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\11\6\1\267\24\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\5\6\1\270\30\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\271\32\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\272\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\273\34\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\274"+
    "\1\6\1\275\2\6\1\0\36\6\3\0\1\276\4\0"+
    "\3\276\1\0\2\276\1\0\2\276\21\0\1\276\3\0"+
    "\2\276\17\0\3\276\12\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\2\6\1\277\3\6\1\0\1\6"+
    "\1\300\34\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\301\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\302"+
    "\4\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\275\2\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\303\4\6\1\0"+
    "\2\6\15\0\1\6\1\304\4\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\305\34\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\306\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\7\6\1\307\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\310\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\2\6\1\311\1\6\1\135\1\6\1\0"+
    "\36\6\24\23\3\0\54\23\24\26\3\0\54\26\30\142"+
    "\1\312\52\142\1\0\3\6\1\0\1\106\1\6\1\313"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\3\6"+
    "\1\162\2\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\314"+
    "\32\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\315\1\0\3\6\1\316\32\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\317\4\6\1\135\3\6\1\275\23\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\2\6\1\275\3\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\320\4\6\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\7\6\1\321"+
    "\1\0\2\6\15\0\5\6\1\322\1\0\4\6\1\323"+
    "\31\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\324\34\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\2\6\1\325"+
    "\3\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\5\6\1\326\30\6"+
    "\1\0\3\6\1\0\1\106\1\6\1\126\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\327\32\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\330\4\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\331\3\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\332\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\333\4\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\3\6\1\334\2\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\5\6\1\335\30\6\1\0"+
    "\1\6\1\336\1\6\1\0\1\106\1\6\1\337\6\6"+
    "\1\0\2\6\15\0\1\6\1\340\4\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\13\6\1\341\22\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\342\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\135\35\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\343\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\7\6\1\344"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\345\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\346\32\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\347\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\350\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\351\2\6"+
    "\1\352\31\6\1\0\3\6\1\0\1\106\7\6\1\353"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\354"+
    "\2\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\274\4\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\355\32\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\135\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\135\32\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\356\4\6\1\0"+
    "\10\6\1\357\25\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\5\6\1\360\30\6"+
    "\1\0\3\6\1\0\1\106\5\6\1\360\2\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\361\4\6\1\0\1\6\1\362\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\356\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\363\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\364\2\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\365\1\366\3\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\367\34\6\1\0\3\6\1\0\1\106\5\6"+
    "\1\370\2\6\1\0\2\6\15\0\3\6\1\125\2\6"+
    "\1\0\3\6\1\363\32\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\371\4\6\1\0\2\6\15\0\1\6\1\372"+
    "\4\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\373\2\6\1\0\3\6"+
    "\1\374\32\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\375\4\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\376\4\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\2\6\1\302\3\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\377\34\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\2\6\1\u0100"+
    "\3\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\1\6\1\u0101\15\0\3\6\1\370\2\6\1\0"+
    "\5\6\1\u0102\2\6\1\u0103\25\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\2\6\1\u0104\1\u0105"+
    "\2\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\356\4\6\1\0\10\6"+
    "\1\217\25\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\10\6\1\u0106\25\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\u0107\1\0\4\6\1\u0108\31\6\1\0\1\6\1\302"+
    "\1\6\1\0\1\106\1\6\1\u0109\6\6\1\0\2\6"+
    "\15\0\3\6\1\u010a\2\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\373"+
    "\2\6\1\0\36\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u010b\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\1\6\1\u010c\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\u010d\4\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\3\6\1\370\2\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u010e\34\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\6\6\1\360\27\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u010f\32\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0110"+
    "\34\6\1\0\3\6\1\0\1\106\1\6\1\u0111\6\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u0112\32\6"+
    "\27\0\1\u0113\112\0\1\u0114\103\0\1\u0115\51\0\1\u0116"+
    "\140\0\1\u0117\74\0\1\u0118\103\0\1\u0119\51\0\1\u011a"+
    "\140\0\1\u011b\35\0\1\263\15\0\1\263\3\0\4\263"+
    "\1\0\4\263\1\0\2\263\6\0\1\263\41\0\1\264"+
    "\6\0\1\264\4\0\2\111\21\0\1\111\26\0\1\111"+
    "\14\0\1\264\6\0\1\264\71\0\3\6\1\0\1\106"+
    "\7\6\1\u010e\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\6\6\1\135\27\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u011c\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u011d\32\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u011e\34\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\315\2\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\333\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\135\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\7\6\1\u011f\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\10\6"+
    "\1\u0120\25\6\1\0\3\6\1\0\1\106\3\6\1\302"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\1\6\1\u0121\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u0122\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\u0123\4\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u0124\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\1\6\1\u0125\1\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\347\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u0126\32\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\2\6\1\146\3\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\146\4\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\135\2\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\174\31\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u0127\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\15\6\1\u0128\20\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\u0129\4\6\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\14\6\1\u012a\21\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\u012b\4\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\u012c\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\7\6\1\u012d\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u012e\34\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\7\6\1\u012f\26\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u0130\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u0131\6\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u0132\2\6\1\u0133\31\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\275\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\135\5\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\u0134\4\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\1\6\1\146\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\12\6\1\u0135\23\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u0136\34\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u0137\23\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u0138\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0139\32\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\135\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u013a\6\6\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\u013b\30\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u013c\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u013d\4\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\14\6\1\u013e\21\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\u013f\4\6\1\0\15\6"+
    "\1\u0140\20\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\u0141\32\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\360\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\214\4\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u0142\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\302\34\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\2\6\1\u0143\33\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\15\6\1\u0144\20\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\12\6\1\u0145"+
    "\23\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\10\6\1\302\25\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\12\6\1\u0146\23\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u0147\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\125\23\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\16\6\1\u0101"+
    "\17\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\360\4\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\15\6\1\u0148\20\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u0101\6\6\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\15\6\1\302\20\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\16\6"+
    "\1\u0148\17\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\4\6\1\u0149\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\360\32\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\3\6\1\u014a\2\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u014b\34\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\360\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\u014c\2\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\u014d\3\6\1\0\10\6\1\u014e\25\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u014f\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0150\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\u0151\34\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\4\6\1\360"+
    "\31\6\1\0\3\6\1\0\1\106\10\6\1\0\1\6"+
    "\1\u0152\15\0\4\6\1\u0153\1\6\1\0\2\6\1\u0154"+
    "\33\6\1\0\3\6\1\0\1\106\7\6\1\u0155\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\u0156\34\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\u0157\31\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\302"+
    "\17\6\1\u0155\12\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\376\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\366\3\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\302\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\15\6\1\u0158\20\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\u0159\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\u0101\23\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\u015a\1\0\36\6\40\0\1\u015b\106\0\1\u015c"+
    "\53\0\1\u0115\106\0\1\u015d\121\0\1\u015e\106\0\1\u015f"+
    "\53\0\1\u0119\106\0\1\u0160\62\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\4\6\1\u0153\1\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u0143\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\15\6"+
    "\1\u0161\20\6\1\0\3\6\1\0\1\106\3\6\1\u0162"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\372\3\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\12\6\1\u0163"+
    "\23\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\5\6\1\u0164\30\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\12\6\1\u0165\23\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\u0166\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\u0167\23\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u0168\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\135\4\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u0169\34\6\1\0\3\6\1\0\1\106\7\6\1\u0163"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u016a\34\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u016b\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u013a\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u016c\32\6"+
    "\1\0\3\6\1\0\1\106\1\6\1\u016d\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\u016e\31\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\u016f\32\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u0170\1\0\2\6\15\0"+
    "\5\6\1\u0171\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\314\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0127\32\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u0172\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0173\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\u0174\4\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0175"+
    "\32\6\1\0\3\6\1\0\1\106\3\6\1\u0127\4\6"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u0176\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\1\6\1\135\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\u0177\34\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u0178\1\0\2\6\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\u0179\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u017a\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u017b\23\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u017c\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\6\6\1\302\27\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\4\6\1\u017d"+
    "\1\6\1\0\36\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u0149\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\27\6\1\225\6\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\u0146\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\7\6\1\302\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\u017e\32\6\1\0\3\6\1\0\1\106\7\6\1\125"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\302\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\302\2\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\u017f\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\u0180\4\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\4\6\1\u0181\31\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u0182\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u0183\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\16\6\1\u0178\17\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u0178\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u0184\23\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\370\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u0185\34\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u0186\34\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\u0187\4\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u0188\23\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\25\6"+
    "\1\u0189\10\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u018a\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u018b\34\6\41\0\1\u0115\2\0\1\u015c\67\0"+
    "\1\u018c\52\0\3\u015d\1\u018d\11\u015d\1\u018d\2\u015d\2\u018d"+
    "\6\0\1\u015d\1\u018d\2\0\1\u018d\6\u015d\1\u018d\36\u015d"+
    "\41\0\1\u0119\2\0\1\u015f\67\0\1\u018e\52\0\3\u0160"+
    "\1\u018f\11\u0160\1\u018f\2\u0160\2\u018f\6\0\1\u0160\1\u018f"+
    "\2\0\1\u018f\6\u0160\1\u018f\36\u0160\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\2\6\1\u0190\3\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\u0191\4\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\1\6\1\u0192\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\1\6\1\315\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u0146\32\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0193"+
    "\34\6\1\0\3\6\1\0\1\106\7\6\1\u0194\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\u0195\4\6\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\16\6\1\275\17\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\275\4\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\u0196\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\30\6\1\u0197\5\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\267\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\10\6\1\275\25\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u0198\34\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\10\6"+
    "\1\u0199\25\6\1\0\3\6\1\0\1\106\3\6\1\317"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\u0138\34\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0192"+
    "\32\6\1\0\3\6\1\0\1\106\7\6\1\u019a\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\135\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u019b\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u019c\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\5\6\1\302\30\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\4\6\1\u0178\31\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\u0146\4\6\1\0\2\6\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\360\2\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\u019d"+
    "\5\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0192\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\4\6"+
    "\1\u019e\1\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u019f\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u01a0\32\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\u01a1\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\5\6\1\370\30\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\u01a2\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\125\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\2\6\1\u01a3\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\u0146"+
    "\2\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u01a4\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u017a\32\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u01a5"+
    "\34\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u0141\4\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u01a6"+
    "\4\6\1\0\5\6\1\125\30\6\31\0\1\u015d\102\0"+
    "\1\u0160\52\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u01a7\31\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u01a8\34\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\146\1\0\2\6\15\0\6\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\10\6\1\u0101\25\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\5\6\1\u01a9"+
    "\30\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u01aa\34\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u012c"+
    "\4\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\4\6\1\162\1\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\u01ab\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u01ac\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\3\6\1\u01ad\2\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\1\6\1\275\15\0\6\6"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u01ae\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\4\6\1\u01af\31\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u017a\34\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\244\4\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u01b0\34\6\1\0\3\6\1\0\1\106\7\6\1\u01b1"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\1\6\1\u01b2\34\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u01b3\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\u01b4\31\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\u01b5\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u01b6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u01b1\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u01b7\4\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\244\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\u0192\4\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\u01b8\4\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\314\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\21\6\1\u01b9\14\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\302\31\6\1\0\3\6\1\0\1\106"+
    "\1\6\1\u01ba\6\6\1\0\2\6\15\0\6\6\1\0"+
    "\36\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u01bb\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\125\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\u01bc\4\6\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\1\6\1\u017f\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\5\6\1\u01bd"+
    "\30\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\15\6\1\u01be\20\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\4\6\1\u01bf\31\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u01c0\1\0\36\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\3\6"+
    "\1\u01c1\2\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\4\6\1\162"+
    "\31\6\1\0\3\6\1\0\1\106\10\6\1\0\1\6"+
    "\1\u0143\15\0\6\6\1\0\36\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\u01c2\30\6\1\0\3\6\1\0\1\106\7\6\1\u01c3"+
    "\1\0\2\6\15\0\6\6\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\u01c4"+
    "\2\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u01c5\34\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\u01c6\30\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\210\31\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\32\6\1\u01c7\3\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\u017b\4\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\1\6\1\360\15\0\6\6\1\0\36\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\u01c8\5\6\1\0\36\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\16\6\1\u0146"+
    "\17\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\25\6\1\u0190\10\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\5\6\1\u01c9"+
    "\1\0\36\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\225\1\0\36\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u01ca"+
    "\4\6\1\0\36\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\162\5\6\1\0\36\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29212];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\2\1\1\11\13\1\1\11"+
    "\44\1\1\11\2\1\1\11\5\1\1\11\4\1\1\11"+
    "\1\0\1\11\10\1\1\0\13\1\1\11\2\1\1\11"+
    "\1\1\2\11\103\1\1\11\1\0\1\11\10\0\2\1"+
    "\1\0\24\1\1\11\110\1\1\11\10\0\77\1\2\0"+
    "\1\1\2\0\54\1\4\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ReqTTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = MULTILINE_STRING_DOUBLE;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				break;
			default:
				state = YYINITIAL;
		}

		s = text;
		start = text.offset;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
    zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReqTTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ReqTTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 28: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.SEPARATOR);
          }
        case 31: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 33: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 9: 
          { /* Skip escaped chars, handles case: '\"""'. */
          }
        case 36: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 37: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 39: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 42: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 43: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 45: break;
        case 19: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 48: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 23: 
          { addToken(Token.LITERAL_BACKQUOTE);
          }
        case 50: break;
        case 24: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 51: break;
        case 25: 
          { /* addToken(start,zzStartRead+2, Token.LITERAL_STRING_DOUBLE_QUOTE); yybegin(YYINITIAL); */
          }
        case 52: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 459: break;
            case MULTILINE_STRING_DOUBLE: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 460: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 461: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 462: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
