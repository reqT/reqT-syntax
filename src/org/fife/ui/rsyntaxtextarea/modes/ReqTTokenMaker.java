/* The following code was generated by JFlex 1.5.1 */

/*
 * 21/05/2014
 *
 * ReqTTokenMaker.java - Scanner for the reqT + Scala.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Scala programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated ReqTTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ReqTTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTILINE_STRING_DOUBLE = 2;
  public static final int MLC = 4;
  public static final int EOL_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\24\1\25\1\26\1\25\22\0\1\33\1\35\1\27"+
    "\1\35\1\1\1\35\1\35\1\22\2\4\1\32\1\16\1\35\1\16"+
    "\1\21\1\31\1\12\11\3\1\44\1\35\1\0\1\35\1\0\2\35"+
    "\1\67\1\10\1\70\1\71\1\14\1\17\1\76\1\1\1\65\2\1"+
    "\1\6\1\64\1\1\1\75\1\72\1\100\1\73\1\54\1\66\1\74"+
    "\1\101\1\77\3\1\1\4\1\23\1\4\1\0\1\5\1\30\1\46"+
    "\1\47\1\11\1\20\1\15\1\42\1\63\1\36\1\43\1\60\1\62"+
    "\1\7\1\55\1\52\1\51\1\40\1\2\1\50\1\41\1\37\1\57"+
    "\1\61\1\45\1\13\1\53\1\56\1\34\1\0\1\34\1\35\6\0"+
    "\1\25\u1fa2\0\1\25\1\25\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\4\2\1\3"+
    "\5\2\1\5\1\6\1\7\1\10\40\2\1\1\1\11"+
    "\1\12\2\1\1\13\5\1\1\14\3\1\1\2\1\3"+
    "\1\0\2\15\6\2\1\0\12\2\1\16\1\17\1\5"+
    "\1\10\1\20\1\10\1\21\1\22\15\2\1\23\70\2"+
    "\1\11\1\0\1\24\10\0\1\2\1\15\1\0\7\2"+
    "\1\25\3\2\1\26\7\2\1\27\14\2\1\16\31\2"+
    "\1\30\43\2\1\31\10\0\102\2\2\0\1\32\2\0"+
    "\1\33\11\2\2\16\43\2\4\0\75\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u0108"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u0108\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0108\0\u0dec\0\u0e2e\0\u0108\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0108\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u0108\0\u10c2"+
    "\0\u0108\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u014a\0\u0108\0\u15a8\0\u15ea\0\u0108"+
    "\0\u162c\0\u0108\0\u0108\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u014a\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u27f6\0\u0108\0\u2838\0\u0108\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u12d2\0\u2d1e"+
    "\0\u2d60\0\u2da2\0\u014a\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u0108\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u393c\0\u014a\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8"+
    "\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8"+
    "\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8"+
    "\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u0108\0\u4284\0\u42c6"+
    "\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6"+
    "\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6"+
    "\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6"+
    "\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26"+
    "\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136"+
    "\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346"+
    "\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556"+
    "\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766"+
    "\0\u57a8\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976"+
    "\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86"+
    "\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96"+
    "\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u561c\0\u6342\0\u56e2"+
    "\0\u6384\0\u63c6\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510\0\u6552"+
    "\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762"+
    "\0\u67a4\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972"+
    "\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82"+
    "\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92"+
    "\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2"+
    "\0\u6fe4\0\u7026\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u71b2"+
    "\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\6\1\16\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\5\1\25\1\10\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\5\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\3\6\1\50\2\6"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\23\67\1\70"+
    "\1\71\2\67\1\72\52\67\24\73\1\74\5\73\1\75"+
    "\3\73\1\76\3\73\1\77\2\73\1\100\34\73\24\101"+
    "\1\102\11\101\1\103\3\101\1\104\2\101\1\105\34\101"+
    "\103\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\3\0\1\7\2\0\2\107\2\0"+
    "\1\7\1\0\2\110\1\0\2\111\1\112\20\0\1\111"+
    "\26\0\1\111\11\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\113\33\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\114\33\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\115\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\116\33\6\1\0\3\6\1\0\1\106\1\6\1\117"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\1\6\1\120"+
    "\33\6\3\0\1\7\2\0\2\107\2\0\1\7\1\121"+
    "\2\110\1\0\2\111\1\112\20\0\1\111\26\0\1\111"+
    "\11\0\3\6\1\0\1\106\5\6\1\122\2\6\1\0"+
    "\2\6\15\0\2\6\1\123\3\6\1\0\5\6\1\124"+
    "\27\6\1\0\3\6\1\0\1\106\1\6\1\125\3\6"+
    "\1\126\2\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\127\1\0\2\6"+
    "\15\0\5\6\1\130\1\0\3\6\1\131\6\6\1\132"+
    "\22\6\1\0\3\6\1\0\1\106\7\6\1\133\1\0"+
    "\2\6\15\0\6\6\1\0\4\6\1\134\30\6\3\0"+
    "\1\112\6\0\1\112\67\0\22\23\1\135\1\136\56\23"+
    "\26\0\1\25\4\0\1\25\46\0\23\26\1\137\3\26"+
    "\1\140\52\26\30\141\1\0\51\141\31\0\1\142\1\143"+
    "\50\0\3\6\1\0\1\106\7\6\1\144\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\145\10\6\1\146\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\147\5\6\1\0\3\6\1\150\2\6\1\151\26\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\152\1\6\1\153\31\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\154\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\155\22\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\156\1\0"+
    "\1\6\1\157\2\6\1\160\30\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\3\6\1\161\1\134"+
    "\1\6\1\0\5\6\1\162\2\6\1\163\24\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\164"+
    "\4\6\1\165\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\2\6\1\166"+
    "\32\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\167\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\170\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\2\6\1\171\11\6\1\172\20\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\173\1\0\2\6"+
    "\15\0\6\6\1\0\12\6\1\174\22\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\5\6\1\175"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\3\6\1\176"+
    "\3\6\1\177\1\0\2\6\15\0\1\6\1\200\1\201"+
    "\3\6\1\0\1\6\1\202\4\6\1\203\26\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\204\33\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\205\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\206\33\6\1\0\3\6\1\0\1\106\7\6\1\207"+
    "\1\0\2\6\15\0\5\6\1\210\1\0\1\6\1\211"+
    "\2\6\1\212\30\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\1\6\1\213\15\0\1\6\1\214\1\6\1\215"+
    "\2\6\1\0\5\6\1\216\2\6\1\217\24\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\220\1\0\2\6\15\0"+
    "\5\6\1\221\1\0\1\6\1\222\33\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\223\4\6\1\0\2\6\15\0"+
    "\1\6\1\224\1\225\3\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\226\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\227\2\6\1\230\30\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\231\1\0\2\6\15\0"+
    "\5\6\1\232\1\0\1\6\1\233\2\6\1\234\30\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\235\31\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\236\1\0\2\6\15\0\5\6\1\237"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\240\1\6\1\241\2\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\242\6\6\1\243\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\244\1\0\4\6\1\245\30\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\246\5\6"+
    "\1\0\4\6\1\247\30\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\12\6\1\250"+
    "\22\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\251\33\6\23\67\2\0"+
    "\2\67\1\0\52\67\24\252\3\0\53\252\27\0\1\253"+
    "\52\0\24\73\1\0\5\73\1\0\3\73\1\0\3\73"+
    "\1\0\2\73\1\0\34\73\31\0\1\254\107\0\1\255"+
    "\101\0\1\256\3\0\1\257\103\0\1\260\34\0\24\101"+
    "\1\0\11\101\1\0\3\101\1\0\2\101\1\0\34\101"+
    "\37\0\1\261\101\0\1\262\3\0\1\263\103\0\1\264"+
    "\34\0\1\265\3\6\1\0\1\106\10\6\1\265\2\6"+
    "\1\0\4\265\1\0\4\265\1\0\2\265\6\6\1\265"+
    "\35\6\3\0\1\266\6\0\1\266\3\0\1\267\66\0"+
    "\1\112\6\0\1\112\1\0\2\110\1\0\2\111\21\0"+
    "\1\111\26\0\1\111\11\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\2\6\1\270\32\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\11\6\1\271\23\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\5\6"+
    "\1\272\27\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\273\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\274\33\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\275\1\6\1\276"+
    "\2\6\1\0\35\6\3\0\1\277\4\0\3\277\1\0"+
    "\2\277\1\0\2\277\21\0\1\277\3\0\2\277\17\0"+
    "\3\277\11\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\2\6\1\300\3\6\1\0\1\6\1\301\33\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\302\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\303\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\3\6\1\276\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\304\4\6\1\0\2\6\15\0"+
    "\1\6\1\305\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\306\33\6\1\0\3\6\1\0\1\106\1\6\1\307"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\310\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\5\6\1\311\27\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\2\6\1\312\1\6\1\134\1\6\1\0\35\6\24\23"+
    "\3\0\53\23\24\26\3\0\53\26\30\141\1\313\51\141"+
    "\1\0\3\6\1\0\1\106\1\6\1\314\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\3\6\1\161\2\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\315\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\316\1\0\3\6\1\317\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\320\4\6\1\134\3\6\1\276\22\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\2\6\1\276"+
    "\3\6\1\0\35\6\1\0\3\6\1\0\1\106\3\6"+
    "\1\321\4\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\322\1\0\2\6"+
    "\15\0\5\6\1\323\1\0\4\6\1\324\30\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\325\33\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\2\6\1\326\3\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\5\6\1\327\27\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\125\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\330\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\331\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\2\6\1\332\3\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\333\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\334"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\3\6\1\335\2\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\336\27\6\1\0\1\6\1\337"+
    "\1\6\1\0\1\106\1\6\1\340\6\6\1\0\2\6"+
    "\15\0\1\6\1\341\4\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\13\6\1\342\21\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\343\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\134\34\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\344\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\345\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\346\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\347\31\6\1\0\3\6\1\0\1\106\3\6\1\350"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\3\6\1\351"+
    "\31\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\352\2\6\1\353\30\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\354\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\355\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\3\6\1\356\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\275"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\357\31\6"+
    "\1\0\3\6\1\0\1\106\1\6\1\134\6\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\134\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\360\4\6\1\0\10\6\1\361\24\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\5\6\1\362\27\6\1\0\3\6\1\0\1\106\5\6"+
    "\1\362\2\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\363\4\6\1\0"+
    "\1\6\1\364\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\360\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\7\6\1\365"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\366"+
    "\2\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\367\1\370\3\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\371\33\6\1\0\3\6"+
    "\1\0\1\106\5\6\1\372\2\6\1\0\2\6\15\0"+
    "\3\6\1\124\2\6\1\0\3\6\1\365\31\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\373\4\6\1\0\2\6"+
    "\15\0\1\6\1\130\4\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\374"+
    "\2\6\1\0\3\6\1\375\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\376\4\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\377\4\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\u0100\3\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0101"+
    "\33\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\2\6\1\u0102\3\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\1\6\1\307\15\0\3\6"+
    "\1\372\2\6\1\0\5\6\1\u0103\2\6\1\u0104\24\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\2\6\1\u0105\1\u0106\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\4\6\1\u0107"+
    "\1\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\360\4\6\1\0\10\6"+
    "\1\217\24\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\10\6\1\u0108\24\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\u0109\1\0\4\6\1\u010a\30\6\1\0\1\6\1\303"+
    "\1\6\1\0\1\106\1\6\1\u010b\6\6\1\0\2\6"+
    "\15\0\3\6\1\u010c\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\374"+
    "\2\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u010d\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u010e\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\1\6\1\u010f\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\u0110\4\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\3\6\1\372\2\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u0111\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\6\6\1\362\26\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u0112\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u0113\33\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\u0114\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u0115\31\6\27\0\1\u0116\111\0\1\u0117"+
    "\102\0\1\u0118\50\0\1\u0119\137\0\1\u011a\73\0\1\u011b"+
    "\102\0\1\u011c\50\0\1\u011d\137\0\1\u011e\34\0\1\265"+
    "\15\0\1\265\3\0\4\265\1\0\4\265\1\0\2\265"+
    "\6\0\1\265\40\0\1\266\6\0\1\266\4\0\2\111"+
    "\21\0\1\111\26\0\1\111\13\0\1\266\6\0\1\266"+
    "\70\0\3\6\1\0\1\106\7\6\1\u0111\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\6\6\1\134"+
    "\26\6\1\0\3\6\1\0\1\106\7\6\1\u011f\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\u0120\31\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\316\2\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\334\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\134\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\u0121\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\10\6\1\u0122"+
    "\24\6\1\0\3\6\1\0\1\106\3\6\1\303\4\6"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\1\6\1\u0123\6\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u0124\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\6"+
    "\1\u0125\4\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\362\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\1\6\1\u0126\1\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\3\6\1\350\4\6\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\u0127\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\2\6"+
    "\1\145\3\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\145\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\3\6\1\134\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\4\6\1\173\30\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0128\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\15\6\1\u0129\17\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\u012a\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\14\6\1\u012b\20\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u012c"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u012d\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\u012e\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u012f"+
    "\33\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\7\6\1\u0130\25\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u0131\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\1\6\1\u0132"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0133"+
    "\2\6\1\u0134\30\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\276\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\134\5\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\u0135\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\1\6"+
    "\1\145\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\12\6"+
    "\1\u0136\22\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\u0137\33\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\u0138\22\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u0139\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u013a\31\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\134\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\1\6\1\u013b"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\5\6\1\u013c\27\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u013d\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\u013e\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\14\6"+
    "\1\u013f\20\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\u0140\4\6\1\0\15\6\1\u0141"+
    "\17\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0142\31\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\362\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\u0143\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\214\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u0144\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\303\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\2\6\1\u0145\32\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\15\6\1\u0146\17\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\12\6\1\u0147\22\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\10\6"+
    "\1\303\24\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\12\6\1\u0148\22\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u0149\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\124\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\16\6\1\307\16\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\362\4\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\15\6\1\u014a\17\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\15\6\1\303\17\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\16\6\1\u014a"+
    "\16\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u014b\30\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\362\31\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u014c\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\3\6\1\u014d\2\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u014e\33\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\3\6\1\u014f\1\u0150\1\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\2\6\1\u0151\3\6\1\0\10\6\1\u0152\24\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\u0153\31\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u0154\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\4\6\1\u0155\1\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u0156\33\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\4\6\1\362\30\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\1\6\1\u0157\15\0"+
    "\4\6\1\u0158\1\6\1\0\2\6\1\u0159\32\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u015a\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u015b\33\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\u015c\30\6\1\0\3\6\1\0\1\106\1\6\1\u015d"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\3\6\1\303\17\6\1\u015a\11\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\377\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\2\6\1\370\3\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\1\6\1\303\6\6\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\15\6\1\u015e"+
    "\17\6\1\0\3\6\1\0\1\106\1\6\1\u015f\6\6"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\12\6\1\307\22\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0160\1\0\35\6\40\0"+
    "\1\u0161\105\0\1\u0162\52\0\1\u0118\105\0\1\u0163\120\0"+
    "\1\u0164\105\0\1\u0165\52\0\1\u011c\105\0\1\u0166\61\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\4\6"+
    "\1\u0158\1\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\5\6\1\u0145\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\u0167\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\2\6\1\130\3\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\12\6\1\u0168\22\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\5\6\1\u0169\27\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\12\6\1\u016a"+
    "\22\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\12\6\1\u016b\22\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u016c\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\134\4\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\1\6\1\u016d\33\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u0168\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u016e\33\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u016f\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\7\6\1\u013b\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\u0170\31\6\1\0\3\6\1\0\1\106\1\6\1\u0171"+
    "\6\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\4\6\1\u0172\30\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0173"+
    "\31\6\1\0\3\6\1\0\1\106\7\6\1\u0174\1\0"+
    "\2\6\15\0\5\6\1\u0175\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\315\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u0128\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u0176\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u0177\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u0178\4\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\3\6\1\u0179\31\6\1\0\3\6\1\0\1\106\3\6"+
    "\1\u0128\4\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u017a\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\1\6\1\134\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u017b\33\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u017c\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u017d\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\5\6\1\u017e"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\12\6\1\u017f\22\6\1\0"+
    "\3\6\1\0\1\106\7\6\1\u0180\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\6\6\1\303\26\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u0181\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\4\6\1\u0182\1\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\7\6\1\u014b"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\27\6\1\u0183\5\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\u0148\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\7\6\1\303\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\3\6\1\u0184"+
    "\31\6\1\0\3\6\1\0\1\106\7\6\1\124\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\3\6"+
    "\1\303\31\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u0185\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\303"+
    "\2\6\1\0\35\6\1\0\3\6\1\0\1\106\3\6"+
    "\1\u015d\4\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\u0186\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u0187\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u0188\30\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u0189\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\7\6\1\u018a"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\16\6\1\u017c\16\6\1\0\3\6\1\0\1\106\7\6"+
    "\1\u018b\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\u017c\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\u018c\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\372\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u018d"+
    "\33\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u018e\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u018f"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\12\6\1\u0190\22\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\5\6\1\u0191\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\25\6\1\u0192"+
    "\7\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u0193\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u0194\33\6\41\0\1\u0118\2\0\1\u0162\66\0\1\u0195"+
    "\51\0\3\u0163\1\u0196\11\u0163\1\u0196\2\u0163\2\u0196\6\0"+
    "\1\u0163\1\u0196\2\0\1\u0196\6\u0163\1\u0196\35\u0163\41\0"+
    "\1\u011c\2\0\1\u0165\66\0\1\u0197\51\0\3\u0166\1\u0198"+
    "\11\u0166\1\u0198\2\u0166\2\u0198\6\0\1\u0166\1\u0198\2\0"+
    "\1\u0198\6\u0166\1\u0198\35\u0166\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\u0181\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\1\6"+
    "\1\u0199\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\1\6\1\316\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0148\31\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u019a\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\3\6\1\u019b"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\16\6\1\276\16\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\276\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\3\6\1\u019c\4\6"+
    "\1\0\2\6\15\0\6\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\30\6\1\u019d\4\6\1\0\3\6\1\0\1\106\1\6"+
    "\1\271\6\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\10\6\1\276\24\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\u019e\33\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\10\6\1\u019f\24\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\320\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\1\6\1\u0139"+
    "\33\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u0199\31\6\1\0\3\6"+
    "\1\0\1\106\7\6\1\u01a0\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\5\6\1\134\27\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\u01a1\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\3\6\1\u01a2\31\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\303\27\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\u017c\30\6\1\0\3\6\1\0\1\106\3\6\1\u0148"+
    "\4\6\1\0\2\6\15\0\6\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\3\6"+
    "\1\362\2\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\u01a3\5\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u01a4\33\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u0199\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\2\6\1\303\3\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\4\6\1\u01a5"+
    "\1\6\1\0\35\6\1\0\3\6\1\0\1\106\3\6"+
    "\1\u01a6\4\6\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\3\6\1\u01a7\31\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\16\6"+
    "\1\u01a8\16\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\5\6\1\u01a9\27\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\5\6\1\372\27\6\1\0\3\6\1\0\1\106"+
    "\3\6\1\u01aa\4\6\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u01ab\31\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\124\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\2\6\1\240\32\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\3\6\1\u0148\2\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u01ac\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\3\6\1\u017e\31\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\246"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u01ad\33\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\1\6\1\u0142\4\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\1\6\1\u01ae\4\6"+
    "\1\0\5\6\1\124\27\6\31\0\1\u0163\101\0\1\u0166"+
    "\51\0\3\6\1\0\1\106\7\6\1\145\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\6\6\1\0\5\6\1\u01af"+
    "\27\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\1\6\1\u01b0\33\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\1\6\1\u012d"+
    "\4\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\4\6\1\161\1\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\3\6\1\u01b1\4\6\1\0"+
    "\2\6\15\0\6\6\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u01b2\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\3\6\1\u01b3\2\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\1\6\1\276\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u01b4\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\4\6\1\u01b5\30\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\6\1\u01b6\4\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u017e\33\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\1\6"+
    "\1\350\33\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\1\6\1\u01b7\33\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\12\6\1\u01b8\22\6\1\0\3\6\1\0\1\106"+
    "\7\6\1\u01b9\1\0\2\6\15\0\6\6\1\0\35\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\1\6\1\u01ba\33\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u01bb\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\4\6\1\u01bc\30\6\1\0\3\6"+
    "\1\0\1\106\3\6\1\u01bd\4\6\1\0\2\6\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u01be\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\3\6\1\246\4\6\1\0\2\6"+
    "\15\0\6\6\1\0\35\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\u0199\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u01bf\4\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\5\6\1\315\27\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\21\6\1\u01c0\13\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\4\6\1\303\30\6\1\0\3\6\1\0"+
    "\1\106\1\6\1\u01c1\6\6\1\0\2\6\15\0\6\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\5\6\1\u01c2\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\5\6\1\u01c3"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\3\6\1\u01a6\31\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\6\6"+
    "\1\0\5\6\1\124\27\6\1\0\3\6\1\0\1\106"+
    "\10\6\1\0\2\6\15\0\1\6\1\u01c4\4\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\6\6\1\0\5\6\1\u01c5\27\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\6\6\1\0"+
    "\5\6\1\u01c6\27\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\15\6\1\u01c7\17\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\4\6\1\u01c8\30\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\3\6\1\u01c9\2\6"+
    "\1\0\35\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\6\6\1\0\4\6\1\161\30\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\1\6\1\u0145\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\4\6\1\210\30\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\u01ca\27\6\1\0\3\6\1\0"+
    "\1\106\7\6\1\u01cb\1\0\2\6\15\0\6\6\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\1\6\1\u01cc\4\6\1\0\35\6\1\0\3\6"+
    "\1\0\1\106\10\6\1\0\2\6\15\0\3\6\1\u01cd"+
    "\2\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\1\6\1\u01ce\33\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\5\6\1\u01cf\27\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\32\6"+
    "\1\u01d0\2\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\u017f\4\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\1\6\1\362\15\0"+
    "\6\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\5\6\1\u0181\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\1\u01d1"+
    "\5\6\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\6\6\1\0\16\6\1\u0148\16\6"+
    "\1\0\3\6\1\0\1\106\10\6\1\0\2\6\15\0"+
    "\6\6\1\0\25\6\1\u01d2\7\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\5\6\1\u01d3\1\0"+
    "\35\6\1\0\3\6\1\0\1\106\10\6\1\0\2\6"+
    "\15\0\5\6\1\u0183\1\0\35\6\1\0\3\6\1\0"+
    "\1\106\10\6\1\0\2\6\15\0\6\6\1\0\4\6"+
    "\1\u01d4\30\6\1\0\3\6\1\0\1\106\10\6\1\0"+
    "\2\6\15\0\1\6\1\u01d5\4\6\1\0\35\6\1\0"+
    "\3\6\1\0\1\106\10\6\1\0\2\6\15\0\5\6"+
    "\1\u01b9\1\0\35\6\1\0\3\6\1\0\1\106\10\6"+
    "\1\0\2\6\15\0\1\161\5\6\1\0\35\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29502];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\2\1\1\11\13\1\1\11"+
    "\44\1\1\11\2\1\1\11\5\1\1\11\4\1\1\11"+
    "\1\0\1\11\7\1\1\0\13\1\1\11\2\1\1\11"+
    "\1\1\2\11\106\1\1\11\1\0\1\11\10\0\2\1"+
    "\1\0\23\1\1\11\112\1\1\11\10\0\102\1\2\0"+
    "\1\1\2\0\57\1\4\0\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[469];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ReqTTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = MULTILINE_STRING_DOUBLE;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				break;
			default:
				state = YYINITIAL;
		}

		s = text;
		start = text.offset;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReqTTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ReqTTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 28: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 30: break;
        case 4: 
          { addToken(Token.SEPARATOR);
          }
        case 31: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 33: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 9: 
          { /* Skip escaped chars, handles case: '\"""'. */
          }
        case 36: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 37: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 39: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 42: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 43: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 44: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 45: break;
        case 19: 
          { addToken(Token.FUNCTION);
          }
        case 46: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 47: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 48: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 23: 
          { addToken(Token.LITERAL_BACKQUOTE);
          }
        case 50: break;
        case 24: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 51: break;
        case 25: 
          { /* addToken(start,zzStartRead+2, Token.LITERAL_STRING_DOUBLE_QUOTE); yybegin(YYINITIAL); */
          }
        case 52: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 470: break;
            case MULTILINE_STRING_DOUBLE: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 471: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 472: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 473: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
